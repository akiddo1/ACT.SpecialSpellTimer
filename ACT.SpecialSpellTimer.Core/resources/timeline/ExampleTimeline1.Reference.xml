<?xml version="1.0" encoding="utf-8"?>
<!--
スペスペたいむの書き方の説明
(c) anoyetta, 2018
-->

<!--
<timeline> タグ
ルート要素
-->
<timeline>
  <!--
  <name> タグ
  string, 任意項目
  タイムラインを識別するための名前
  オーバーレイや管理画面に表示しタイムラインを識別する
  -->
  <name>スペスペたいむの説明書</name>

  <!--
  <rev>, <description> タグ
  string, 任意項目
  動作には一切影響がない項目
  ファイルの識別用にリビジョンと詳細説明を記述できる。
  それぞれ設定画面で参照できる。
  -->
  <rev>rev4</rev>
  <description>
    スペスペたいむの定義ファイルの説明書です。
    これ自体をタイムラインとして使用することは出来ません。
    ファイルに書かれたコメントを定義ファイル作成時の参考としてください。
  </description>

  <!--
  <zone> タグ
  string, 任意項目
  このタイムラインが自動的にロードされるゾーン名。
  FFXIV_ACT_Pluginが識別する CurrentZoneName と一致させる必要があるため英語で指定する。
  例) 極白虎
  <zone>The Jade Stoa</zone>
  -->
  <zone>ゾーンなし</zone>

  <!--
  <locale> タグ
  enum, 任意項目
  JA, EN, FR, DE, KO
  このタイムライン定義がどのロケール向けに作られているのかを識別する。
  ゾーンと合わせて自動ロードの条件に含まれる。
  スペスペで設定しているゲームのロケールとタイムラインファイルのロケール、FFXIVプラグインの現在ゾーン名とタイムラインファイルのゾーン
  この両方が一致した場合にタイムラインがロードされる。
  -->
  <locale>JA</locale>

  <!--
  <entry> タグ
  string, 任意項目
  最初にロードするサブルーチンを指定する。
  指定しない場合はtimeline直下の<a>タグを読み込む。
  指定した場合はtimeline直下の<a>タグは無視され、指定されたサブルーチンを初期アクティビティラインとして読み込む。
  -->
  <entry>メインフェーズ</entry>

  <!--
  <start> タグ
  string(RegEx), 任意項目
  通常では「戦闘開始まで5秒前！」を検知してから4.8秒後にタイムラインをスタートする。
  このスタートタグに任意のログを指定するとそのログを検知したときに即時スタートする。
  例) シグマ零式2層
  <start>こいつは久しぶりに良い絵だわい……。 誰にも邪魔はさせんぞ！！</start>
  -->
  <start>オオオオオ……この衝動、もはや止められん！</start>

  <!-- アクティビティ -->
  <a time="00:06" text="風雷波動" notice="次は、風雷波動。" />
  <!--
  <a> タグ
  アクティビティを示すタイムラインの主な定義要素

  name :
  string, 任意項目
  このアクティビティの識別子。gotoやcallで指定するために使用する。

  time :
  TimeSpan, アクティビティの発生時刻を示す。
  mm:ss形式, s形式 どちらで書いてもよい。

  text :
  string, 任意項目
  オーバーレイに表示するアクティビティの表示テキスト。
  textを省略すると同期のみ、通知のみに使用されオーバーレイには表示されない。

  sync :
  string(RegEx), 任意項目
  タイムラインの時間経過を強制的にこのアクティビティの時刻に合わせるためのログマッチングキーワード。
  ここに指定されたパターンとログがマッチしたときタイムラインの現在時刻をこのアクティビティの時刻に合わせる。
  正規表現が使える。

  sync-s :
  double, 任意項目, 既定値-12
  syncマッチングを開始する時間のオフセット秒数。
  このアクティビティの12秒前から同期マッチングを開始する。

  sync-e :
  double, 任意項目, 既定値12
  syncマッチングを終了する時間のオフセット秒数。
  このアクティビティの12秒後まで同期マッチングを継続する。

  goto :
  string, 任意項目
  このアクティビティの時刻が到来したときにここで指定されたnameのアクティビティ、サブルーチンにジャンプする。

  call :
  string, 任意項目
  このアクティビティの時刻が到来したときにここで指定されたnameのサブルーチンをコールする。

  notice :
  string, 任意項目
  このアクティビティの時刻が到来したときに通知を行う。
  waveファイルを指定した場合はwaveを再生する。
  その他の文字列の場合はTTSとして発声する。

  notice-d :
  enum, 任意項目, 既定値Both
  通知を再生するデバイスを指定します。TTSYukkuriでのメインデバイス、サブデバイスの設定に準ずる。
  Both : 普通の設定。デバイスを指定せず、TTSYukkuriでメイン、サブ両方を定義している場合両方で再生する。
  Main : TTSYukkuriで定義されたメインデバイスでのみ再生する。
  Sub  : TTSYukkuriで定義されたサブデバイスでのみ再生する。

  notice-o :
  double, 任意項目, 既定値-6
  通知発生させる時間的オフセット秒数。
  既定値ではアクティビティの時刻が到来する6秒前に通知する。

  style :
  string, 任意項目
  設定UIで定義したStyleを割り当てます。指定しない場合は規定のStyleが割当てられる。

  icon :
  string, 任意項目
  Styleのicon属性を上書きする。
  アイコンのファイル名を指定するとStyle定義よりも優先してこの属性のアイコンを表示する。
  アイコンの表示サイズはStyleのアイコンサイズに依存する。
  例)
  <a time="00:01" text="マーカ" icon="マーカー128px.png" />

  enabled :
  bool, 任意項目, 既定値true
  このエレメントが有効か無効か。無効な場合はコメントと同じ扱いになる。
  -->

  <!-- トリガ -->
  <t text="天雷掌" sync="白虎は「天雷掌」の構え。" notice="天雷掌" goto="フェーズ1" />
  <!--
  <t> タグ
  タイムラインの実行中に常駐するトリガ。
  通知に使用したりランダムなフェーズ展開を追尾したりという用途で使用する。

  name :
  string, 任意項目
  このトリガの識別子。

  text :
  string, 任意項目
  トリガはオーバーレイには表示されないがログには出力される。そのときに出力されるtext

  sync :
  string(RegEx)
  このトリガのマッチングパターン

  sync-count :
  int, 任意項目, 既定値0
  何回目のマッチングでこのトリガを実行するか？
  0ならば、毎回のマッチングでトリガを実行する。
  1ならば、1回目のマッチング時のみトリガを実行する。
  2ならば、2回目のマッチング時のみトリガを実行する。
  ...
  という仕組み。

  goto :
  string, 任意項目
  このトリガにマッチしたときにここで指定されたnameのアクティビティ、サブルーチンにジャンプする。

  call :
  string, 任意項目
  このアクティビティの時刻が到来したときにここで指定されたnameのサブルーチンをコールする。

  notice :
  string, 任意項目
  このトリガにマッチしたときに通知を行う。
  waveファイルを指定した場合はwaveを再生する。
  その他の文字列の場合はTTSとして発声する。

  notice-d :
  enum, 任意項目, 既定値Both
  通知を再生するデバイスを指定します。TTSYukkuriでのメインデバイス、サブデバイスの設定に準ずる。
  Both : 普通の設定。デバイスを指定せず、TTSYukkuriでメイン、サブ両方を定義している場合両方で再生する。
  Main : TTSYukkuriで定義されたメインデバイスでのみ再生する。
  Sub  : TTSYukkuriで定義されたサブデバイスでのみ再生する。

  enabled :
  bool, 任意項目, 既定値true
  このエレメントが有効か無効か。無効な場合はコメントと同じ扱いになる。
  -->

  <!-- トリガ＋ロード -->
  <t name="to Phase1" sync="オオオオオ……この衝動、もはや止められん！">
    <load target="フェーズ1" truncate="true" />
    <load target="フェーズ2" />
    <load target="最終フェーズ" />
  </t>
  <!--
  <load> タグ
  トリガの子要素として使用する。トリガの条件に合致したときに指定したサブルーチンのアクティビティを
  現在のアクティビティラインの最後尾に追加する。

  target :
  string, 任意項目
  追加するサブルーチンの名前

  truncate :
  bool, 任意項目, 既定値false
  追加するときに現在のアクティビティラインをすべて消去してから追加するか否か。
  消去した場合は強制的に現在のアクティビティが追加されるサブルーチンの冒頭のアクティビティに変わる。

  enabled :
  bool, 任意項目, 既定値true
  このエレメントが有効か無効か。無効な場合はコメントと同じ扱いになる。
  -->

  <!-- サブルーチン -->
  <s name="メインフェーズ">
    <a time="00:29" text="乾坤一擲" notice="次は、乾坤一擲。" />
    <a time="00:37" text="呪縛雷" notice="次は、呪縛雷。" />
    <a time="00:06" text="風雷波動" notice="次は、風雷波動。" />
    <t sync="Added New Combantant 白帝" goto="フェーズ3" />
  </s>
  <!--
  <s> タグ
  アクティビティのブロックを定義するサブルーチンを定義する。
  s タグの子要素がサブルーチンとして機能する。
  サブルーチン内の時刻はサブルーチンの開始時からのオフセットで定義すること。

  子要素
    <a> : サブルーチン内部のタイムラインを定義する。時間はサブルーチン開始時点からのオフセットで定義する
    <t> : サブルーチン内部でのみ稼働するトリガを定義する。

  name :
  string
  このサブルーチンの名前および識別子。goto, callのターゲットとなる。
  またこのサブルーチンの実行中はオーバーレイに表示される。

  enabled :
  bool, 任意項目, 既定値true
  このエレメントが有効か無効か。無効な場合はコメントと同じ扱いになる。
  -->

  <!-- デフォルト値設定 -->
  <default target-element="Activity" target-attr="notice-o" value="-3" />
  <!--
  <default> タグ
  各要素, 属性に規定値を設定する。
  無効な要素名, 属性。特にキャストできない型の値を設定した場合はエラーになる。
  ログをよく確認すること。

  target-element :
  enum
  規定値を設定する要素を指定する
  Activity : a タグ（アクティビティ）に対して適用する
  Trigger  : t タグ（トリガ）に対して適用する

  target-attr :
  string
  既定値を設定する属性を指定する
  例)
  target-element="Activity"
  target-attr="notice-o"
  value="-3"
  アクティビティの規定の通知時刻オフセットを-3秒にする。

  value :
  object
  設定する既定値。キャストできないとエラーになるので注意すること。
  defaultを使用した場合はロード時にログを確認してエラーがないことを確認するのが望ましい。

  enabled :
  bool, 任意項目, 既定値true
  このエレメントが有効か無効か。無効な場合はコメントと同じ扱いになる。
  -->
</timeline>
